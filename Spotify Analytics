# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 


#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

SELECT *
FROM BIT_DB.Spotifydata;


--What is the average danceability by artist and track? 
SELECT AVG(danceability), artist_name, track_name
FROM BIT_DB.Spotifydata
GROUP BY artist_name, track_name;


--Who are the top 10 artists based on popularity? 
SELECT artist_name, AVG(popularity)  
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY AVG(popularity) DESC LIMIT 10;

--Who are the top 10 artists based on popularity of each track? 
SELECT track_name, artist_name, popularity
FROM BIT_DB.spotifydata
ORDER BY popularity desc
LIMIT 10;


-- What artist released the longest song? 
SELECT  artist_name, duration_ms
FROM BIT_DB.spotifydata
ORDER BY duration_ms desc
LIMIT 1;


--What's the average danceability for the 10 most popular songs?
SELECT  AVG (popularity), AVG (danceability)
FROM BIT_DB.Spotifydata
LIMIT 10;

-- Sort the songs as 'Fast', 'Medium', or 'Slow' under the column 'Song Tempo'. Order them from fast to slow.
SELECT track_name, tempo,
CASE WHEN tempo > 120 THEN 'Fast'
WHEN tempo between 90 and 120 THEN 'Medium'
ELSE 'Slow'
END AS 'Speed'
FROM BIT_DB.Spotifydata
ORDER BY tempo DESC;

